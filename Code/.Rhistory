?qplot
qplot(pur$order)
qplot(pur$order[pur$venue_postal_cd_sgmt_1 == 79905,])
qplot(pur$order[pur$venue_postal_cd_sgmt_1 == 79905])
qplot(log(pur$order[pur$venue_postal_cd_sgmt_1 == 79905]))
qplot(log(pur$order[pur$venue_postal_cd_sgmt_1 == 75219]))
qplot(log(pur$order[pur$venue_postal_cd_sgmt_1 == 63103]))
?summary
sales = read.csv("~/Download/sales_data.csv")
sales = read.csv("~/Downloads/sales_data.csv")
summary(sales)
View(sales)
names(sales)
Sales = na.omit(sales)
summary(Sales)
noise = read.csv("~/Downloads/311_Service_Requests_from_2010_to_Present (1).csv")
summary(noise)
View(noise)
names(noise)
is.na(noise$Landmark)
summary(is.na(noise$Landmark))
summary(is.na(noise$Incident.Zip))
summary(is.na(noise$Location.Type))
with(noise, summary(Descriptor))
library(data.table)
speed = fread('http://207.251.86.229/nyc-links-cams/LinkSpeedQuery.txt')
with(noise, summary(Descriptor))
noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)"),]
noise$Descriptor[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)")]
which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)
)
)
;
.
/
1
;
}
}
=
1
))
)))))
end
which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1))
;
end
end
end
noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)]
end
end
noise$title[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1))}
}
]
end
end
noise$title[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1))]
]
end
noise$title
noise$title[1:5]
summary(noise$title)
View(noise)
noise[which(Closed.Date == " ")]
noise[which(noise$Closed.Date == "")]
noise[which(noise$Closed.Date == ""),]
which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1))
)
)()
end
noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)"),]
summary(noise$Descriptor)
noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)"|noise$Descriptor == "Noise: Construction Equipment (NC1)"),]
summary(noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)"|noise$Descriptor == "Noise: Construction Equipment (NC1)"),]$Descriptor)
construction = noise[which(noise$Descriptor == "Noise: Construction Before/After Hours (NM1)"|noise$Descriptor == "Noise: Construction Equipment (NC1)"),]
summary(construction)
construction_manhattan = construction[which(construction$Borough == "MANHATTAN"),]
summary(construction_manhattan)
write.csv(construction_manhattan, "~/Desktop/manhattan.csv")
manhattan = read.csv("~/Desktop/manhattan.csv")
?groupsum
View(manhattan)
manhattan = read.csv("~/Downloads/manhattan.csv")
manhattan = read.csv("~/Downloads/manhattan.csv")
View(manhattan)
class(manhattan$Created.Date)
as.Date(manhattan$Created.Date)
as.Date(manhattan$Created.Date,format = "%D-%M-%Y")
as.Date(noise$Created.Date)
as.Date(manhattan$Created.Date)
CDate = noise$Created.Date
gsub("-","/",CDate)
MCDate = gsub("-","/",CDate)
as.Date(MCDate)
as.factor(MCDate)
MCDate = MCDate = gsub("-","/",CDate)
as.Date(MCDate)
as.Date(MCDate, format = "%m/%d/%y")
manhattan$Created.Date2 = MCDate
manhattan$Created.Date2 = as.Date(MCDate, format = "%m/%d/%y")
manhattan2 = read.csv("~/Desktop/manhattan.csv")
View(manhattan2)
manhattan2$Created.Date = gsub("/", "-", manhattan2$Created.Date)
View(manhattan2)
as.Date(manhattan2$Created.Date)
as.Date(manhattan2$Created.Date))
manhattan2 = read.csv("~/Desktop/manhattan.csv")
as.Date(manhattan2$Created.Date)
as.Date(manhattan2$Created.Date, format = "%m/%d/%y")
manhattan2$Date = as.Date(manhattan2$Created.Date, format = "%m/%d/%y")
aggregate(count ~ Date, manhattan2, sum)
aggregate(Count ~ Date, manhattan2, sum)
manhattan.by.date = aggregate(Count ~ Date, manhattan2, sum)
View(manhattan.by.date)
ts(manhattan.by.date)
ts1 = ts(manhattan.by.date)
plot(ts1)
ts1 = ts(manhattan.by.date$Count)
plot(ts1)
ts1 = ts(manhattan.by.date$Count, frequency = 7)
plot(ts1)
ts1 = ts(manhattan.by.date$Count, frequency = 1)
ts1 = ts(manhattan.by.date$Count, frequency = 1, start = c(2010,1,1))
plot(ts1)
ts1 = ts(manhattan.by.date$Count, start = c(2010,1,1))
plot(ts1)
class(manhattan.by.date)
class(manhattan.by.date$Date)
with(manhattan.by.date, plot(Count ~ Date))
ts1
ts1 = ts(manhattan.by.date$Count, frequency = 7)
auto.arima(ts1)
library(forecast)
auto.arima(ts1)
ar1 = auto.arima(ts1)
plot(ar1)
dim(ts1)
dim(manhattan.by.date)
ts2 = ts(manhattan.by.date$Count[1:2000])
ar2 = auto.arima(ts2)
fore.ar2 = forecast(ar2,7)
plot(fore.ar2)
plot(fore.ar2,100)
decompose(ts2)
decompose(manhattan.by.date$Count)
View(ts2)
ts2 = ts(manhattan.by.date$Count[1:2000], frequency = 7)
View(ts2)
decompose(ts2)
plot(decompose(ts2))
names(decompose(ts2))
auto.arima(ts2)
ts2[1990:2000]
ts2
fore1 = auto.arima(ts2)
summary(fore1)
fore11 = forecast(fore1, 30)
plot(fore11)
fore11 = forecast(fore1, 100)
plot(fore11)
fore11 = forecast(fore1, 1000)
plot(fore11)
View(manhattan.by.date)
manhattan.by.date[which(manhattan.by.date$Date == "2013-07-10"),]
fore11 = forecast(fore1, 20)
plot(fore11)
ts2 = ts(manhattan.by.date$Count[1:2000], frequency = 52)
plot(ts2)
ts2 = ts(manhattan.by.date$Count[1:2000], frequency = 7)
decompose(ts2)
summary(decompose(ts2))
plot(decompose(ts2))
plot(manhatta.by.date$Count, manhattan.by.date$Date)
plot(manhattan.by.date)
library(ggplot2)
manhattan.by.date[366,]
manhattan.by.date[1,]
manhattan.by.date[which(manhattan.by.date$Date == "2014-01-01"),]
manhattan.by.date[1122+365,]
m2 = manhattan.by.date[1122:1122+365+365,]
View(m2)
m2 = manhattan.by.date[(1122:1122+365+365),]
View(m2)
m2 = manhattan.by.date[c(1122:1122+365+365),]
View(m2)
m2 = manhattan.by.date[1122:1487,]
View(m2)
1487
1487+365
m2 = manhattan.by.date[1122:1852,]
View(m2)
row.names(m2) = NULL
View(m2)
plot(m2)
ggplot() + geom_line(data = m2, aes(x = Date, y = Count))
ts2 = ts(m2$Count, frequency = 7)
decompose(ts2)
day(2014-01-01)
decompose(ts2)$seasonal
m2[which(m2$Count == max(m2$Count)),]
manhattan3 = read.csv("~/Desktop/Workbook3.csv")
summary(manhattan3)
aggregate(Normalized ~ Date, manhattan3, max)
aggregate(Normalized ~ date, manhattan3, max)
aggregate(date ~ Normalized, manhattan3, max)
View(manhattan3)
manhattan3 = read.csv("~/Desktop/Workbook3.csv")
aggregate(date ~ Normalized, manhattan3, max)
aggregate(Normalized ~ factor, manhattan3, max)
aggregate(Normalized ~ date, manhattan3, max)
daymax = aggregate(Normalized ~ date, manhattan3, max)
dim(manhattan3)
manhattan3$index = rep(NA, dim(manhattan3)[1])
names(daymax)
manhattan3$index = rep(NA, dim(manhattan3)[1])
for(i in (1:dim(manhattan3)[1])){
for(j in (1:dim(daymax)[1])){
if(manhattan3$date[i] == daymax$date[j]){
if(manhattan3$Normalized[i] == daymax$Normalized[j]){
manhattan3$index[i] = 100
}
else{
manhattan3$index[i] = 100*(manhattan3$Normalized[i]/daymax$Normalized[j])
}
}
}
}
View(manhattan3)
manhattan3$index = rep(NA, dim(manhattan3)[1])
for(i in (1:dim(manhattan3)[1])){
for(j in (1:dim(daymax)[1])){
if(manhattan3$date[i] == daymax$date[j]){
if(manhattan3$Normalized[i] == daymax$Normalized[j]){
manhattan3$index[i] = 100
}
else{
manhattan3$index[i] = 100*(manhattan3$Normalized[i]/daymax$Normalized[j])
}
}
}
}
aggregate(zip ~ index, manhattan3, mean)
aggregate(index ~ zip, manhattan3, mean)
sort(aggregate(index ~ zip, manhattan3, mean))
?sort
sort(aggregate(index ~ zip, manhattan3, mean)$index, decreasing = F)
sort(aggregate(index ~ zip, manhattan3, mean)$index, decreasing = T)
aggregate(index ~ zip, manhattan3, mean)[order(zip,index),]
aggregate(index ~ zip, manhattan3, mean)[order(as.numeric(zip),index),]
aggregate(index ~ zip, manhattan3, mean)[order(zip,index),]
aggregate(index ~ zip, manhattan3, mean)[order(index),]
aggregate(index ~ zip, manhattan3, mean)
index.mean = aggregate(index ~ zip, manhattan3, mean)
View(index.mean)
write.csv(index.mean, "~/Desktop/mean_index_by_zips.csv")
write.csv(manhattan3, "~/Desktop/manhattan3.csv")
names(manhattan3)
m1 = lm(complaints ~ current_permits, data = manhattan3)
summary(m1)
plot(m1)
9.267e-04
m1 = lm(current_permits ~ complaints, data = manhattan3)
summary(m1)
m1 = lm(complaints ~ current_permits, data = manhattan3)
summary(m1)
View(manhattan3)
manhattan3 = read.csv("~/Desktop/manhattan3.csv")
View(manhattan3)
aggregate(zip ~ index, data = manhattan3, mean)
aggregate(index ~ zip, data = manhattan3, mean)
sensitivity = aggregate(index ~ zip, data = manhattan3, mean)
plot(sensitivity)
View(sensitivity)
sensitivity[orer(index),]
sensitivity[order(index),]
sensitivity[order(zip,index),]
order(sensitivity[[2]])
write.csv(sensitivity, "~/Desktop/mean_sensitivity.csv")
mean_complaints = aggregate(complaints ~ zip, data = manhattan3, mean)
summary(mean_complaints)
plot(mean_complaints$complaints)
boxplot(mean_complaints$complaints)
mean_complaints_by_date = aggregate(complaints ~ date, data = manhattan3, mean)
summary(mean_complaints_by_date)
summary(mean_complaints_by_date$complaints)
total_complaints_by_zip = aggregate(complaints ~ zip, data = manhattan3, sum)
summary(total_complaints_by_zip)
write.csv(total_complaints_by_zip, "~/Desktop/totalbyzip.csv")
totalbyzip = read.csv("~/Desktop/ttalbyzip.csv")
totalbyzip = read.csv("~/Desktop/totalbyzip.csv")
totalbyzip$permits = aggregate(current_permits ~ zip, data = manhattan3, sum)
View(totalbyzip)
totalbyzip$permits = aggregate(current_permits ~ zip, data = manhattan3, sum)$current_permits
View(totalbyzip)
ggplot() + geom_point(data = totalbyzip, aes(x = zip, y = complaints))
m2 = lm(complaints ~ permits, data = totalbyzip)
summary(m2)
plot(m2)
plot(complaints ~ permits, data = totalbyzip)
write.csv(totalbyzip, "~/Desktop/totalbyzip.csv")
View(mean_complaints)
write.csv(mean_complaints, "~/Desktop/meancomplaintsbyzip.csv")
View(totalbyzip)
totalbyzip$complaint2 = (complaints-mean(complaints))/mean(complaints)
totalbyzip$complaint2 = (totalbyzip$complaints-mean(totalbyzip$complaints))/mean(totalbyzip$complaints)
View(totalbyzip)
mean(totalbyzip$complaints)
totalbyzip$complaints
library(tree)
setwd("~/Documents/NYU/Taming-the-Peak")
library(tree)
data = read.csv('Final_Data/energy_final_2012_13.csv)
''
)
'
data = read.csv('Final_Data/energy_final_2012_13.csv')
View(data)
grouped = read.csv('Final_Data/grouped_2012.csv')
View(grouped)
data1 = read.csv('Final_Data/final1213_reshaped.csv')
install.packages('rpart')
library(rpart)
names(data1)
View(data1)
data1 = data1[,-1]
data1
View(data1)
fit = rpart(Income ~.)
fit = rpart(Income ~ Temperature_F + Consumption + Diff_perc)
fit = rpart(Income ~ Temperature_F + Consumption + Diff_perc, data = data1)
printcp(fit)
plotcp(fit)
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE,
main="Classification")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
plot(fit, main="Classification")
text(fit)
text(fit,use.n=TRUE)
plot(fit, main="Classification")
text(fit,use.n=TRUE)
?text
plot(fit, main="Classification")
text(fit,use.n=TRUE, cex = 0.5)
plot(fit, main="Classification")
text(fit,use.n=TRUE, cex = 0.7)
plot(fit, main="Classification")
text(fit,use.n=TRUE, cex = 0.6)
plot(fit, main="Classification")
text(fit,use.n=TRUE, cex = 0.5)
?plot
plot(cars)
plot(fit, main="Classification")
text(fit,use.n=TRUE, cex = 0.5)
?tree
fit1 = tree(Income ~ ., data = data1)
fit1 = tree(Income ~ Cosumptoion + Overall + Diff_perc, data = data1)
fit1 = tree(Income ~ Consumptoion + Overall + Diff_perc, data = data1)
fit1 = tree(Income ~ Consumption + Overall + Diff_perc, data = data1)
plot(fit1)
text(fit1)
dim(data1)
dim(data1)[1]/3
fit1 = tree(Income ~ Temperature_F + Consumption + Overall + Diff_perc, data = data1)
plot(fit1)
text(fit1)
data = read.csv("Final_Data/energy_per_house_for_logisticReg_100to500_Feb2013.csv")
View(data)
data2 = read.csv("Final_Data/acs.csv")
View(data2)
names(data2)
data1 = read.csv("Final_Data/final1213_reshaped.csv")
names(data1)
data1[,-1]
data = data1[,-1]
names(data)
fit = tree(Income ~ Temperature, Consumption, Diff_perc, Month, DayofWeek, Hour, data =  data)
fit = tree(Income ~ Temperature_F, Consumption, Diff_perc, Month, DayofWeek, Hour, data =  data)
fit = tree(Income ~ Temperature_F, Consumption, Diff_perc, DayofWeek, Hour, data =  data)
data
fit = tree(Income ~ Temperature_F, Consumption, Diff_perc, DayofWeek, Hour, data =  data)
data2 = data
fit = tree(Income ~ Temperature_F, Consumption, Diff_perc, DayofWeek, Hour, data =  data2)
names(data2)
fit = tree(Income ~ Temperature_F, Consumption, Diff_perc, data =  data2)
?tree
fit = rpart(Income ~ Temperature_F, Consumption, Diff_perc, Month, DayofWeek, Hour, data =  data)
class(data$Hour)
is.data.frame(data)
is.data.frame(data$Hour)
fit = rpart(Income ~ Temperature_F + Consumption + Diff_perc + Month + DayofWeek + Hour, data =  data)
plot(fit)
text(fit)
text(fit, cex = 0.5)
plot(fit)
text(fit, cex = 0.5)
fit = tree(Income ~ Temperature_F + Consumption + Diff_perc + Month + DayofWeek + Hour, data =  data)
plot(tree)
fit = tree(Income ~ Temperature_F + Consumption + Diff_perc + Month, data =  data)
plot(tree)
fit = tree(Income ~ Temperature_F + Consumption + Diff_perc, data =  data)
plot(tree)
fit = tree(Income ~ Temperature_F + Consumption + Diff_perc + Month + DayofWeek + Hour, data =  data)
plot(fit)
text(tree, cex = 0.5)
text(fit, cex = 0.5)
data$Hour = as.factor(data$Hour)
data$Month = as.factor(data$Month)
data$DayofWeek = as.factor(data$DayofWeek)
fit = tree(Income ~ Temperature_F + Consumption + Diff_perc + Month + DayofWeek + Hour, data =  data)
plot(fit)
text(fit, cex = 0.6)
data$Month
prune(fit)
?rm
rm(list = c())
rm(list = All
)
rm(list = ls())
data$DayofWeek = as.factor(data$DayofWeek)
library(tree)
data = read.csv("Final_Data/final1213_reshaped.csv")
data$Hour = as.factor(data$Hour)
data$Month = as.factor(data$Month)
data$WeekofYear = as.factor(data$WeekofYear)
data$DayofWeek = as.factor(data$DayofWeek)
names(data)
source('~/.active-rstudio-document', echo=TRUE)
m = lm(Consumption ~ Income + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear)
m = lm(Consumption ~ Income + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear, data = data)
summary(m)
library(tree)
data = read.csv("Final_Data/final1213_reshaped.csv")
data = data[,-1]
data$Hour = as.factor(data$Hour)
data$Month = as.factor(data$Month)
data$WeekofYear = as.factor(data$WeekofYear)
data$DayofWeek = as.factor(data$DayofWeek)
data$Year = as.factor(data$Year)
?which
which(data, data$Year == "2012")
train = data[which(data$Year == "2012"),]
m = lm(Consumption ~ Income + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear, data = train)
train = data[which(data$Year == "2012"),]
test = data[which(data$Year == "2013"),]
summary(m)
predict(m, data = test)
predicted = predict(m, data = test)
mean((predicted - test$Consumption)^2)
plot(test$Consumption, predicted)
length(predicted)
length(test$Consumption)
test = data[which(data$Year == "2013" && data$Consumption != NA),]
train = data[which(data$Year == "2012" && data$Consumption != NA),]
m = lm(Consumption ~ Income + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear, data = train)
data$Consumption != NA
data$Consumption == NA
is.na(train$Consumption)
class(data$Consumption)
is.na(data$Consumption)
train = data[which(data$Year == "2012" && is.na(data$Consumption) != F),]
test = data[which(data$Year == "2013" && is.na(data$Consumption) != F),]
train = data[which(data$Year == "2012" && is.na(data$Consumption) == F),]
test = data[which(data$Year == "2013" && is.na(data$Consumption) == F),]
View(train)
train = data[which(data$Year == "2012"),]
test = data[which(data$Year == "2013"),]
train = na.omit(train)
test = na.omit(test)
m = lm(Consumption ~ Income + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear, data = train)
summary(m)
predicted = predict(m, data = test)
plot(test$Consumption, predicted)
length(predicted)
prediction <- predict(m, newdata = test)
mean((prediction - test$Consumption)^2)
plot(test$Consumption ~ prediction)
plot(test$Consumption,prediction)
mean(test$Consumption)
mean(sqrt((prediction - test$Consumption)^2))
mean(abst(prediction - test$Comsumption))
mean(abs(prediction - test$Comsumption))
abs(prediction - test$Comsumption)
names(train)
m = lm(Consumption ~ Income + Wind_Speed_MPH + Humidity + Temperature_F + Month + DayofWeek + Hour + WeekofYear, data = train)
summary(m)
5.698e-04
step(m)
plot(m)
test_low = test[which(test$Income == "Low"),]
predicted_low = predict(m, newdata = test_low)
plot(predicted_low)
library(ggplot2)
ggplot + geom_point(predicted_low)
class(test_low$Datetime)
data
test$predicted = prediction
write.csv(test, "Final_Data/predicted_2013.csv")
m1 = lm(Consumption ~ Income + DayofWeek + Hour + WeekofYear, data = train)
summary(m1)
prediction1 <- predict(m1, newdata = test)
mean(sqrt((prediction1 - test$Consumption)^2))
plot(prediction1 ~ test$Consumption)
test$predict2 = prediction1
write.csv(test, "Final_Data/predicted_2013.csv")
setwd("~/Documents/NYU/Taming-the-Peak/Code")
data = read.csv("../Final_Data/final1213_reshaped.csv")
